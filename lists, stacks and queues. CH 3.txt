Chapter 3:

This chapter talks about the three most simple data structures: lists, stacks and queues. Nearly every significant program will use at least one of these structures explicitly and a stack is always implicitly used in your program whether or not you declare one.

These are the highlights of this chapter:

-Introduce the concept of abstract data types (ADT)

-Show how to efficiently perform operations on lists

-Introduce the stack ADT and its use in implementing recursion

-Introduce the queue ADT and its use in operating systems and algorithm design

An abstract data type is a set of operations. Abstract data types are math abstractions: nowhere in an ADT's definition is there any mention of how the set of operations is implemented. This can be viewed as an extension of modular design.

Objects like lists, sets, graphs and their operations can be viewed as ADT's. 

ERRORS WITHIN YOUR CODE
The most common error that you will get is that your program will crash with a nasty error message from the system, such as "memory access violation" or "segmentation violation." This message usually means that a pointer variable contained a bogus address.


STACK MODEL
A stack is a list with the restriction that inserts and deletes can be performed in only one position, namely the end of the list called the top. The fundamental operations on a stack are push, which is equivalent to an insert, and pop, which deletes the most recently inserted element. 


QUEUE MODEL
The basic operations on a queue are enqueue, which inserts an element at the end of the list (called the rear), and dequeue, which deletes (and returns) the element at the start of the list (known as the front). 

